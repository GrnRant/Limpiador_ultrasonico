/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef PROGRAMAPRINCIPALREQUIRED_H_
#define PROGRAMAPRINCIPALREQUIRED_H_

#include "../inc/sc_types.h"
#include "ProgramaPrincipal.h"

#ifdef __cplusplus
extern "C"
{
#endif 

/*! \file This header defines prototypes for all functions that are required by the state machine implementation.

This is a state machine uses time events which require access to a timing service. Thus the function prototypes:
	- programaPrincipal_setTimer and
	- programaPrincipal_unsetTimer
are defined.

This state machine makes use of operations declared in the state machines interface or internal scopes. Thus the function prototypes:
	- programaPrincipalIface_opLED
	- programaPrincipalIface_opLEDs
	- programaPrincipalIface_opMostrarPantalla
	- programaPrincipalIface_opGetPerfilTemp
	- programaPrincipalIface_opGetPerfilTiempo
	- programaPrincipalIface_opGetActTemp
	- programaPrincipalIface_opSetTemp
	- programaPrincipalIface_opSetTiempo
	- programaPrincipalIface_opCalentador
	- programaPrincipalIface_opTransductor
	- programaPrincipalIface_opCheckEnd
are defined.

These functions will be called during a 'run to completion step' (runCycle) of the statechart. 
There are some constraints that have to be considered for the implementation of these functions:
	- never call the statechart API functions from within these functions.
	- make sure that the execution time is as short as possible.
 
*/
extern void programaPrincipalIface_opLED(const ProgramaPrincipal* handle, const sc_integer LEDNumber, const sc_boolean State);
extern void programaPrincipalIface_opLEDs(const ProgramaPrincipal* handle, const sc_integer LEDNumber);
extern void programaPrincipalIface_opMostrarPantalla(const ProgramaPrincipal* handle, const sc_integer Screen, const sc_integer Cursor);
extern sc_integer programaPrincipalIface_opGetPerfilTemp(const ProgramaPrincipal* handle, const sc_integer Perfil);
extern sc_integer programaPrincipalIface_opGetPerfilTiempo(const ProgramaPrincipal* handle, const sc_integer Perfil);
extern void programaPrincipalIface_opGetActTemp(const ProgramaPrincipal* handle);
extern void programaPrincipalIface_opSetTemp(const ProgramaPrincipal* handle, const sc_integer Temp, const sc_integer Perfil);
extern void programaPrincipalIface_opSetTiempo(const ProgramaPrincipal* handle, const sc_integer Time, const sc_integer Perfil);
extern void programaPrincipalIface_opCalentador(const ProgramaPrincipal* handle, const sc_boolean Estado);
extern void programaPrincipalIface_opTransductor(const ProgramaPrincipal* handle, const sc_boolean Estado);
extern sc_boolean programaPrincipalIface_opCheckEnd(const ProgramaPrincipal* handle, const sc_integer Tiempo_act);



/*!
 * This is a timed state machine that requires timer services
 */ 

/*! This function has to set up timers for the time events that are required by the state machine. */
/*! 
	This function will be called for each time event that is relevant for a state when a state will be entered.
	\param evid An unique identifier of the event.
	\time_ms The time in milliseconds
	\periodic Indicates the the time event must be raised periodically until the timer is unset 
*/
extern void programaPrincipal_setTimer(ProgramaPrincipal* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic);

/*! This function has to unset timers for the time events that are required by the state machine. */
/*! 
	This function will be called for each time event that is relevant for a state when a state will be left.
	\param evid An unique identifier of the event.
*/
extern void programaPrincipal_unsetTimer(ProgramaPrincipal* handle, const sc_eventid evid);



#ifdef __cplusplus
}
#endif 

#endif /* PROGRAMAPRINCIPALREQUIRED_H_ */
