/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef PROGRAMAPRINCIPAL_H_
#define PROGRAMAPRINCIPAL_H_

#include "../inc/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'ProgramaPrincipal'.
*/

/*! Define number of states in the state enum */

#define PROGRAMAPRINCIPAL_STATE_COUNT 26

/*! Define dimension of the state configuration vector for orthogonal states. */
#define PROGRAMAPRINCIPAL_MAX_ORTHOGONAL_STATES 4

/*! Define maximum number of time events that can be active at once */
#define PROGRAMAPRINCIPAL_MAX_PARALLEL_TIME_EVENTS 5

/*! Define indices of states in the StateConfVector */
#define SCVI_PROGRAMAPRINCIPAL_TECX_DEBOUNCE 0
#define SCVI_PROGRAMAPRINCIPAL_TECX_NO_OPRIMIDO 0
#define SCVI_PROGRAMAPRINCIPAL_TECX_OPRIMIDO 0
#define SCVI_PROGRAMAPRINCIPAL_TECX_VALIDACION 0
#define SCVI_PROGRAMAPRINCIPAL_TECX_MANTENIDO 0
#define SCVI_PROGRAMAPRINCIPAL_CONTROL_TEMP_CALENTANDO 1
#define SCVI_PROGRAMAPRINCIPAL_CONTROL_TEMP_NO_CALENTANDO 1
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_INFORMACION 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_MENU_PRINCIPAL 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_MENU_PRINCIPAL_MENU_PRINCIPAL_ESPERA 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_EDITAR_PERFIL 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_EDITAR_PERFIL_EDICION_ESPERA 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_ELEGIR_PERFIL 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_ELEGIR_PERFIL_ELECCION_ESPERA 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_CONFIRMACION_DE_SELECCION 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_CONFIRMACION_DE_SELECCION_CONFIRMACION_SELEC_ESPERA 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_CONFIRMACION_DE_CANCELADO 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_CONFIRMACION_DE_CANCELADO_CONFIRMACION_CANC_ESPERA 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_CONFIGURACION_INICIAL 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_PERFIL 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_PERFIL_EDICION_TEMP_Y_TIEMPO_ESPERA 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_PERFIL_EDICION_TEMP_Y_TIEMPO_EDICION_TIEMPO 2
#define SCVI_PROGRAMAPRINCIPAL_IINTERFAZ_PERFIL_EDICION_TEMP_Y_TIEMPO_EDICION_TEMP 2
#define SCVI_PROGRAMAPRINCIPAL_CONTROL_LIMPIEZA_ESPERA 3
#define SCVI_PROGRAMAPRINCIPAL_CONTROL_LIMPIEZA_ESPERA_CALENTAMIENTO 3
#define SCVI_PROGRAMAPRINCIPAL_CONTROL_LIMPIEZA_TRANSDUCTOR_ENCENDIDO 3

/*! Enumeration of all states */ 
typedef enum
{
	ProgramaPrincipal_last_state,
	ProgramaPrincipal_TECX_DEBOUNCE,
	ProgramaPrincipal_TECX_NO_OPRIMIDO,
	ProgramaPrincipal_TECX_OPRIMIDO,
	ProgramaPrincipal_TECX_VALIDACION,
	ProgramaPrincipal_TECX_MANTENIDO,
	ProgramaPrincipal_control_temp_CALENTANDO,
	ProgramaPrincipal_control_temp_NO_CALENTANDO,
	ProgramaPrincipal_Iinterfaz_INFORMACION,
	ProgramaPrincipal_Iinterfaz_MENU_PRINCIPAL,
	ProgramaPrincipal_Iinterfaz_MENU_PRINCIPAL_menu_principal_ESPERA,
	ProgramaPrincipal_Iinterfaz_EDITAR_PERFIL,
	ProgramaPrincipal_Iinterfaz_EDITAR_PERFIL_edicion_ESPERA,
	ProgramaPrincipal_Iinterfaz_ELEGIR_PERFIL,
	ProgramaPrincipal_Iinterfaz_ELEGIR_PERFIL_eleccion_ESPERA,
	ProgramaPrincipal_Iinterfaz_CONFIRMACION_DE_SELECCION,
	ProgramaPrincipal_Iinterfaz_CONFIRMACION_DE_SELECCION_confirmacion_selec_ESPERA,
	ProgramaPrincipal_Iinterfaz_CONFIRMACION_DE_CANCELADO,
	ProgramaPrincipal_Iinterfaz_CONFIRMACION_DE_CANCELADO_confirmacion_canc_ESPERA,
	ProgramaPrincipal_Iinterfaz_CONFIGURACION_INICIAL,
	ProgramaPrincipal_Iinterfaz_PERFIL,
	ProgramaPrincipal_Iinterfaz_PERFIL_edicion_temp_y_tiempo_ESPERA,
	ProgramaPrincipal_Iinterfaz_PERFIL_edicion_temp_y_tiempo_EDICION_TIEMPO,
	ProgramaPrincipal_Iinterfaz_PERFIL_edicion_temp_y_tiempo_EDICION_TEMP,
	ProgramaPrincipal_control_limpieza_ESPERA,
	ProgramaPrincipal_control_limpieza_ESPERA_CALENTAMIENTO,
	ProgramaPrincipal_control_limpieza_TRANSDUCTOR_ENCENDIDO
} ProgramaPrincipalStates;

/*! Type definition of the data structure for the ProgramaPrincipalIface interface scope. */
typedef struct
{
	sc_boolean evTECXNoOprimido_raised;
	sc_boolean evTECXOprimido_raised;
	sc_integer evTECXOprimido_value;
	sc_boolean siLimp_raised;
	sc_boolean siTimeOff_raised;
	sc_boolean siCancLimp_raised;
	sc_boolean siTempHigher_raised;
	sc_boolean siTempLower_raised;
	sc_boolean limpieza;
	sc_integer perfil;
	sc_integer time_act;
	sc_integer temp_act;
} ProgramaPrincipalIface;


/* Declaration of constants for scope ProgramaPrincipalIface. */
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_TEC1;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_TEC2;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_TEC3;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_TEC4;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_TEC_SELEC;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_TEC_INC;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_TEC_DEC;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_LEDR;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_LEDG;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_LEDB;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_LED1;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_LED2;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_LED3;
extern const sc_boolean PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_ON;
extern const sc_boolean PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_OFF;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_INFO;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_MENU;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_ELECCION;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_EDICION;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_CONFIRMACION_SELEC;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_CONFIRMACION_CANC;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_PERFIL1;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_PERFIL2;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_PERFIL3;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_PERFIL_DEFECTO;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_MENU_OPCIONES;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_ELECCION_OPCIONES;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_EDICION_OPCIONES;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_CONFIRMACION_OPCIONES;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_MAX_TIEMPO;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_MIN_TEMP;
extern const sc_integer PROGRAMAPRINCIPAL_PROGRAMAPRINCIPALIFACE_MAX_TEMP;


/*! Type definition of the data structure for the ProgramaPrincipalInternal interface scope. */
typedef struct
{
	sc_boolean siTECXOK_raised;
	sc_boolean siTECMANTENIDO_raised;
	sc_integer viTecla;
	sc_integer cursor;
	sc_integer pantalla;
	sc_integer temp_set;
	sc_integer time_set;
} ProgramaPrincipalInternal;



/*! Type definition of the data structure for the ProgramaPrincipalTimeEvents interface scope. */
typedef struct
{
	sc_boolean programaPrincipal_TECX_DEBOUNCE_tev0_raised;
	sc_boolean programaPrincipal_TECX_OPRIMIDO_tev0_raised;
	sc_boolean programaPrincipal_TECX_MANTENIDO_tev0_raised;
	sc_boolean programaPrincipal_control_temp_CALENTANDO_tev0_raised;
	sc_boolean programaPrincipal_control_temp_NO_CALENTANDO_tev0_raised;
	sc_boolean programaPrincipal_Iinterfaz_INFORMACION_tev0_raised;
	sc_boolean programaPrincipal_Iinterfaz_CONFIGURACION_INICIAL_tev0_raised;
	sc_boolean programaPrincipal_control_limpieza_TRANSDUCTOR_ENCENDIDO_tev0_raised;
	sc_boolean programaPrincipal_control_limpieza_TRANSDUCTOR_ENCENDIDO_tev1_raised;
} ProgramaPrincipalTimeEvents;




/*! 
 * Type definition of the data structure for the ProgramaPrincipal state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	ProgramaPrincipalStates stateConfVector[PROGRAMAPRINCIPAL_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	ProgramaPrincipalIface iface;
	ProgramaPrincipalInternal internal;
	ProgramaPrincipalTimeEvents timeEvents;
} ProgramaPrincipal;



/*! Initializes the ProgramaPrincipal state machine data structures. Must be called before first usage.*/
extern void programaPrincipal_init(ProgramaPrincipal* handle);

/*! Activates the state machine */
extern void programaPrincipal_enter(ProgramaPrincipal* handle);

/*! Deactivates the state machine */
extern void programaPrincipal_exit(ProgramaPrincipal* handle);

/*! Performs a 'run to completion' step. */
extern void programaPrincipal_runCycle(ProgramaPrincipal* handle);

/*! Raises a time event. */
extern void programaPrincipal_raiseTimeEvent(ProgramaPrincipal* handle, sc_eventid evid);

/*! Raises the in event 'evTECXNoOprimido' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_raise_evTECXNoOprimido(ProgramaPrincipal* handle);

/*! Raises the in event 'evTECXOprimido' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_raise_evTECXOprimido(ProgramaPrincipal* handle, sc_integer value);

/*! Raises the in event 'siLimp' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_raise_siLimp(ProgramaPrincipal* handle);

/*! Raises the in event 'siTimeOff' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_raise_siTimeOff(ProgramaPrincipal* handle);

/*! Raises the in event 'siCancLimp' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_raise_siCancLimp(ProgramaPrincipal* handle);

/*! Raises the in event 'siTempHigher' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_raise_siTempHigher(ProgramaPrincipal* handle);

/*! Raises the in event 'siTempLower' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_raise_siTempLower(ProgramaPrincipal* handle);

/*! Gets the value of the variable 'TEC1' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_tEC1(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'TEC2' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_tEC2(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'TEC3' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_tEC3(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'TEC4' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_tEC4(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'TEC_SELEC' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_tEC_SELEC(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'TEC_INC' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_tEC_INC(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'TEC_DEC' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_tEC_DEC(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'LEDR' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_lEDR(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'LEDG' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_lEDG(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'LEDB' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_lEDB(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'LED1' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_lED1(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'LED2' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_lED2(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'LED3' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_lED3(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'ON' that is defined in the default interface scope. */ 
extern sc_boolean programaPrincipalIface_get_oN(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'OFF' that is defined in the default interface scope. */ 
extern sc_boolean programaPrincipalIface_get_oFF(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'INFO' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_iNFO(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'MENU' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_mENU(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'ELECCION' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_eLECCION(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'EDICION' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_eDICION(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'CONFIRMACION_SELEC' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_cONFIRMACION_SELEC(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'CONFIRMACION_CANC' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_cONFIRMACION_CANC(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'PERFIL1' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_pERFIL1(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'PERFIL2' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_pERFIL2(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'PERFIL3' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_pERFIL3(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'PERFIL_DEFECTO' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_pERFIL_DEFECTO(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'MENU_OPCIONES' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_mENU_OPCIONES(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'ELECCION_OPCIONES' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_eLECCION_OPCIONES(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'EDICION_OPCIONES' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_eDICION_OPCIONES(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'CONFIRMACION_OPCIONES' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_cONFIRMACION_OPCIONES(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'MAX_TIEMPO' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_mAX_TIEMPO(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'MIN_TEMP' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_mIN_TEMP(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'MAX_TEMP' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_mAX_TEMP(const ProgramaPrincipal* handle);
/*! Gets the value of the variable 'limpieza' that is defined in the default interface scope. */ 
extern sc_boolean programaPrincipalIface_get_limpieza(const ProgramaPrincipal* handle);
/*! Sets the value of the variable 'limpieza' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_set_limpieza(ProgramaPrincipal* handle, sc_boolean value);
/*! Gets the value of the variable 'perfil' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_perfil(const ProgramaPrincipal* handle);
/*! Sets the value of the variable 'perfil' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_set_perfil(ProgramaPrincipal* handle, sc_integer value);
/*! Gets the value of the variable 'time_act' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_time_act(const ProgramaPrincipal* handle);
/*! Sets the value of the variable 'time_act' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_set_time_act(ProgramaPrincipal* handle, sc_integer value);
/*! Gets the value of the variable 'temp_act' that is defined in the default interface scope. */ 
extern sc_integer programaPrincipalIface_get_temp_act(const ProgramaPrincipal* handle);
/*! Sets the value of the variable 'temp_act' that is defined in the default interface scope. */ 
extern void programaPrincipalIface_set_temp_act(ProgramaPrincipal* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean programaPrincipal_isActive(const ProgramaPrincipal* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean programaPrincipal_isFinal(const ProgramaPrincipal* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean programaPrincipal_isStateActive(const ProgramaPrincipal* handle, ProgramaPrincipalStates state);


#ifdef __cplusplus
}
#endif 

#endif /* PROGRAMAPRINCIPAL_H_ */
